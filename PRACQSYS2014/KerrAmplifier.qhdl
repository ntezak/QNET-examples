-- Structural QHDL generated by gnetlist
-- Entity declaration

ENTITY KerrAmplifier IS
    GENERIC (
        kappa : real;
        eta : real;
        Delta : real;
        chi : real);
    PORT (
        In1 : in fieldmode;
        bias : in fieldmode;
        Out1 : out fieldmode;
        bias_noise : out fieldmode);
END KerrAmplifier;


-- Secondary unit
ARCHITECTURE netlist OF KerrAmplifier IS
    COMPONENT TwoPortKerrCavity
    GENERIC (
        Delta : real;
        chi : real;
        kappa_1 : real;
        kappa_2 : real);
    PORT (
        In1 : in fieldmode;
        In2 : in fieldmode;
        Out1 : out fieldmode;
        Out2 : out fieldmode);
    END COMPONENT ;

    COMPONENT Beamsplitter
    GENERIC (
        theta : real := 0.7853981633974483);
    PORT (
        In1 : in fieldmode;
        In2 : in fieldmode;
        Out1 : out fieldmode;
        Out2 : out fieldmode);
    END COMPONENT ;

    SIGNAL unnamed_net8 : fieldmode;
    SIGNAL unnamed_net7 : fieldmode;
    SIGNAL unnamed_net6 : fieldmode;
    SIGNAL unnamed_net5 : fieldmode;
    SIGNAL unnamed_net4 : fieldmode;
    SIGNAL unnamed_net3 : fieldmode;
    SIGNAL unnamed_net2 : fieldmode;
    SIGNAL unnamed_net1 : fieldmode;
BEGIN
-- Architecture statement part
    BS2 : Beamsplitter
    PORT MAP (
        In1 => unnamed_net4,
        In2 => unnamed_net2,
        Out1 => unnamed_net7,
        Out2 => unnamed_net8);

    BS1 : Beamsplitter
    PORT MAP (
        In1 => unnamed_net5,
        In2 => unnamed_net6,
        Out1 => unnamed_net1,
        Out2 => unnamed_net3);

    K2 : TwoPortKerrCavity
    GENERIC MAP (
        Delta => Delta,
        chi => chi,
        kappa_1 => kappa,
        kappa_2 => eta);
    PORT MAP (
        In1 => unnamed_net3,
        Out1 => unnamed_net4,
        In2 => OPEN,
        Out2 => OPEN);

    K1 : TwoPortKerrCavity
    GENERIC MAP (
        Delta => Delta,
        chi => chi,
        kappa_1 => kappa,
        kappa_2 => eta);
    PORT MAP (
        In1 => unnamed_net1,
        Out1 => unnamed_net2,
        In2 => OPEN,
        Out2 => OPEN);

-- Signal assignment part
unnamed_net6 <= In1;
unnamed_net5 <= bias;
bias_noise <= unnamed_net8;
Out1 <= unnamed_net7;
END netlist;
